// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-py"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id String @id

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    programs        Program[]
    liftExercises   LiftExercise[]
    sportExercises  SportExercise[]
    cardioExercises CardioExercise[]
}

model Program {
    id          String    @id @default(cuid())
    name        String
    description String
    endDate     DateTime?

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    user     User      @relation(fields: [userId], references: [id])
    userId   String
    workouts Workout[]
}

model Workout {
    id          String    @id @default(cuid())
    name        String
    description String
    endDate     DateTime?

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    liftActivities   LiftActivity[]
    sportActivities  SportActivity[]
    cardioActivities CardioActivity[]

    program   Program @relation(fields: [programId], references: [id])
    programId String
}

model LiftActivity {
    id     String @id @default(cuid())
    sets   Int
    reps   Int
    weight Int
    notes  String

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    workout   Workout @relation(fields: [workoutId], references: [id])
    workoutId String

    liftExercise LiftExercise @relation(fields: [liftExerciseId], references: [id])

    liftExerciseId String
}

model LiftExercise {
    id          String @id @default(cuid())
    name        String
    description String

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    user           User?          @relation(fields: [userId], references: [id])
    userId         String?
    liftActivities LiftActivity[]
}

model SportActivity {
    id      String @id @default(cuid())
    seconds Int
    notes   String

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    workout   Workout @relation(fields: [workoutId], references: [id])
    workoutId String

    sportExercise   SportExercise @relation(fields: [sportExerciseId], references: [id])
    sportExerciseId String
}

model SportExercise {
    id          String @id @default(cuid())
    name        String
    description String

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    sportActivities SportActivity[]
}

model CardioActivity {
    id      String @id @default(cuid())
    sets    Int
    seconds Int
    notes   String

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    workout   Workout @relation(fields: [workoutId], references: [id])
    workoutId String

    cardioExcercise  CardioExercise @relation(fields: [cardioExerciseId], references: [id])
    cardioExerciseId String
}

model CardioExercise {
    id          String @id @default(cuid())
    name        String
    description String

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    cardioActivities CardioActivity[]
}
